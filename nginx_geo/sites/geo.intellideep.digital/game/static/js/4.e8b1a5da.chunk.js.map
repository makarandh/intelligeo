{"version":3,"sources":["components/ErrorBoundary.js","components/HelpText.js","components/GameOptions.js","components/Home.js"],"names":["ErrorBoundary","state","hasError","error","errorInfo","console","this","className","props","children","React","Component","HelpText","HELP_PARA","HELP_HEADING","CHOICE_COUNT","FREE_ANS","PENALTY_PER_ANS","GameOptions","handleRadioChange","e","a","gameLength","parseInt","target","value","setGameLength","saveToLocalStorage","GAMELENGTH","SUBSECTION","OPTIONS_SUBSECTION","optionsVisible","SLIDE_DOWN","SLIDE_UP","SUBHEADING","OPTIONS_CONTAINER","onChange","OPTION_CONTAINER","htmlFor","OPTION_SHORT","type","id","name","OPTION_GAME_LENGTH","checked","SHORT_GAME_LENGTH","OPTION","BUTTON","OPTION_MEDIUM","MEDIUM_GAME_LENGTH","OPTION_LONG","LONG_GAME_LENGTH","Home","inProgress","helpVisible","checkForOlderGame","localStorage","getItem","INPROGRESS","JSON","parse","setState","startNewGame","clearAllLocalStorage","playGame","window","location","href","ROUTE_GAME","toggleOptions","prevState","toggleHelp","CARD_CONTAINER_CONTAINER","GAME_MENU","CARD_CONTAINER","BUTTON_YELLOW","BUTTON_PURPLE_BORDER","onClick","BUTTON_ORANGE","HELP_CONTAINER"],"mappings":"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","file":"static/js/4.e8b1a5da.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default class ErrorBoundary extends React.Component {\n    state = {\n        hasError: false\n    }\n\n    static getDerivedStateFromError() {\n        return {hasError: true}\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.error(error, errorInfo)\n    }\n\n    render() {\n        if(this.state.hasError) {\n            return <div className={\"error_message\"}>Something went wrong. Please try refreshing the page.</div>\n        }\n        return this.props.children\n    }\n}\n","import React from \"react\"\nimport {\n    CHOICE_COUNT,\n    FREE_ANS,\n    HELP_HEADING,\n    HELP_PARA,\n    PENALTY_PER_ANS,\n} from \"../helper/common\"\n\n\nfunction HelpText() {\n    return (\n        <article>\n            <div className={HELP_PARA}><span className={HELP_HEADING}>Objective of the game </span> is\n                to score points by guessing the countries correctly in each card.\n            </div>\n            <div className={HELP_PARA}><span\n                className={HELP_HEADING}>Choose the correct option</span> from a total\n                of {CHOICE_COUNT} choices.\n            </div>\n            <div className={HELP_PARA}><span className={HELP_HEADING}>Three clues </span> are provided\n                for each country.\n            </div>\n            <div className={HELP_PARA}><span className={HELP_HEADING}>Additional hints </span> in the\n                form of questions and answers are provided. Click \"View More Hints\" to view them. You\n                can view upto {FREE_ANS} answers to these hints for free. Viewing additional answers\n                cost you {PENALTY_PER_ANS} points.\n            </div>\n        </article>\n    )\n}\n\nexport default HelpText\n","import React from \"react\"\nimport {\n    BUTTON, GAMELENGTH,\n    LONG_GAME_LENGTH, MEDIUM_GAME_LENGTH, OPTION, OPTION_CONTAINER,\n    OPTION_GAME_LENGTH, OPTION_LONG,\n    OPTION_MEDIUM, OPTION_SHORT,\n    OPTIONS_CONTAINER, OPTIONS_SUBSECTION,\n    SHORT_GAME_LENGTH, SLIDE_DOWN, SLIDE_UP, SUBHEADING, SUBSECTION\n} from \"../helper/common\"\nimport \"../css/GameOptions.css\"\n\nexport default class GameOptions extends React.Component {\n\n    handleRadioChange = async(e) => {\n        const gameLength = parseInt(e.target.value)\n        await this.props.setGameLength(gameLength)\n        this.props.saveToLocalStorage(GAMELENGTH, gameLength)\n    }\n\n    render() {\n        return (\n            <section className={SUBSECTION + \" \"\n                                + OPTIONS_SUBSECTION + \" \"\n                                + (this.props.optionsVisible\n                                   ? SLIDE_DOWN\n                                   : SLIDE_UP)}>\n                <h3 className={SUBHEADING}>Game length </h3>\n                <div>(Only applicable to new games)</div>\n                <div className={OPTIONS_CONTAINER}>\n                    <fieldset onChange={this.handleRadioChange}>\n                        <div>\n                            <label className={OPTION_CONTAINER} htmlFor={OPTION_SHORT}>\n                                <input type=\"radio\"\n                                       id={OPTION_SHORT}\n                                       name={OPTION_GAME_LENGTH}\n                                       checked={this.props.gameLength === SHORT_GAME_LENGTH}\n                                       value={SHORT_GAME_LENGTH}/>\n                                <div className={OPTION_SHORT\n                                                + \" \" + OPTION\n                                                + \" \" + BUTTON}>\n                                    Short ({SHORT_GAME_LENGTH} cards)\n                                </div>\n                            </label>\n                        </div>\n                        <div>\n                            <label className={OPTION_CONTAINER} htmlFor={OPTION_MEDIUM}>\n                                <input type=\"radio\"\n                                       id={OPTION_MEDIUM}\n                                       name={OPTION_GAME_LENGTH}\n                                       checked={this.props.gameLength === MEDIUM_GAME_LENGTH}\n                                       value={MEDIUM_GAME_LENGTH}/>\n                                <div className={OPTION_MEDIUM\n                                                + \" \" + OPTION\n                                                + \" \" + BUTTON}>\n                                    Medium ({MEDIUM_GAME_LENGTH} cards)\n                                </div>\n                            </label>\n                        </div>\n                        <div>\n                            <label className={OPTION_CONTAINER} htmlFor={OPTION_LONG}>\n                                <input type=\"radio\"\n                                       id={OPTION_LONG}\n                                       name={OPTION_GAME_LENGTH}\n                                       checked={this.props.gameLength === LONG_GAME_LENGTH}\n                                       value={LONG_GAME_LENGTH}/>\n                                <div className={OPTION_LONG\n                                                + \" \" + OPTION\n                                                + \" \" + BUTTON}>\n                                    Long ({LONG_GAME_LENGTH} cards)\n                                </div>\n                            </label>\n                        </div>\n                    </fieldset>\n                </div>\n            </section>\n        )\n    }\n}\n","import React from \"react\"\nimport {\n    BUTTON, BUTTON_ORANGE,\n    BUTTON_PURPLE_BORDER,\n    BUTTON_YELLOW,\n    CARD_CONTAINER,\n    INPROGRESS,\n    GAME_MENU,\n    ROUTE_GAME, HELP_CONTAINER, SLIDE_DOWN, SLIDE_UP, CARD_CONTAINER_CONTAINER\n} from \"../helper/common\"\nimport \"../css/Home.css\"\nimport ErrorBoundary from \"./ErrorBoundary\"\nimport GameOptions from \"./GameOptions\"\nimport HelpText from \"./HelpText\"\n\nexport default class Home extends React.Component {\n\n    state = {\n        inProgress: false,\n        optionsVisible: false,\n        helpVisible: false\n    }\n\n    checkForOlderGame = async() => {\n        let inProgress = localStorage.getItem(INPROGRESS)\n        if(inProgress === null) {\n            return\n        }\n        inProgress = JSON.parse(inProgress)\n        if(typeof inProgress === \"boolean\") {\n            await this.setState({inProgress})\n        }\n    }\n\n    startNewGame = () => {\n        this.props.clearAllLocalStorage()\n        this.playGame()\n    }\n\n    playGame = () => {\n        window.location.href = ROUTE_GAME\n    }\n\n    toggleOptions = () => {\n        this.setState((prevState) => {\n            return {optionsVisible: !prevState.optionsVisible}\n        })\n    }\n\n    toggleHelp = () => {\n        this.setState((prevState) => {\n            return {helpVisible: !prevState.helpVisible}\n        })\n    }\n\n    componentDidMount() {\n        this.checkForOlderGame()\n    }\n\n    render() {\n        return (\n            <div className={CARD_CONTAINER_CONTAINER + \" \" + GAME_MENU}>\n                <article className={CARD_CONTAINER + \" \" + GAME_MENU}>\n                    <ErrorBoundary>\n                        <ul>\n                            {this.state.inProgress && <li>\n                                <button className={BUTTON + \" \" + GAME_MENU\n                                                   + \" \" + BUTTON_YELLOW\n                                                   + \" \" + BUTTON_PURPLE_BORDER}\n                                        onClick={this.playGame}>Resume Game\n                                </button>\n                            </li>}\n                            <li>\n                                <button className={BUTTON + \" \" + GAME_MENU\n                                                   + \" \" + BUTTON_YELLOW\n                                                   + \" \" + BUTTON_PURPLE_BORDER}\n                                        onClick={this.startNewGame}>New Game\n                                </button>\n                            </li>\n                            <li>\n                                <button className={BUTTON + \" \" + GAME_MENU\n                                                   + \" \" + BUTTON_YELLOW\n                                                   + \" \" + BUTTON_PURPLE_BORDER\n                                                   + \" \" + (this.state.helpVisible && BUTTON_ORANGE)}\n                                        onClick={this.toggleHelp}>{(this.state.helpVisible && \"Hide \")}How To Play\n                                </button>\n                            </li>\n                            <article className={HELP_CONTAINER + \" \"\n                                                + (this.state.helpVisible\n                                                   ? SLIDE_DOWN\n                                                   : SLIDE_UP)}>\n                                <HelpText/>\n                            </article>\n                            <li>\n                                <button className={BUTTON + \" \" + GAME_MENU\n                                                   + \" \" + BUTTON_YELLOW\n                                                   + \" \" + BUTTON_PURPLE_BORDER\n                                                   + \" \" + (this.state.optionsVisible && BUTTON_ORANGE)}\n                                        onClick={this.toggleOptions}>{(this.state.optionsVisible && \"Hide \")}Options\n                                </button>\n                            </li>\n                            <GameOptions optionsVisible={this.state.optionsVisible}\n                                         setGameLength={this.props.setGameLength}\n                                         gameLength={this.props.gameLength}\n                                         saveToLocalStorage={this.props.saveToLocalStorage}/>\n                        </ul>\n                    </ErrorBoundary>\n                </article>\n            </div>\n        )\n    }\n}\n"],"sourceRoot":""}