{"version":3,"sources":["components/ErrorBoundary.js","components/HelpText.js","components/CardHero.js","components/Choices.js","components/Clues.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/QAns.js","components/ResultIcons.js","components/YesNoModal.js","components/Card.js","components/EndGame.js","components/Game.js"],"names":["ErrorBoundary","state","hasError","error","errorInfo","console","this","className","props","children","React","Component","HelpText","HELP_PARA","HELP_HEADING","CHOICE_COUNT","FREE_ANS","PENALTY_PER_ANS","CardHero","getCountryName","country","name","getImageInfoURL","image_info","url","getImageURL","id","IMAGE_URL","getPhotographer","photographer","HERO_IMAGE_CONTAINER","WORLD_MAP_CONTAINER","ansClicked","HIDE_ME","SHOW_ME","HERO_WORLD_MAP","src","IMAGES_PATH","alt","HERO_PERSON1","HERO_PERSON2","HERO_PERSON3","ANS_IMAGE_CONTAINER","PHOTO_CREDIT_CONTAINER","href","rel","target","ANS_BELOW_IMAGE","Choices","randomized","countries","loadChoicesFromLocalStorage","a","loadFromLocalStorage","CHOICES","setState","loadChoices","fetchChoices","fetchCountryList","countryID","response","status","countryIDNames","json","result","map","element","push","countryName","i","length","j","Math","floor","random","saveToLocalStorage","setNetworkError","processAns","ans","setAnsClicked","setClickedAns","updateScoreAndCount","getClassNames","classList","BUTTON_DISABLED","CORRECT_ANS","clickedAns","WRONG_ANS","renderChoices","CHOICE_BUTTONS_CONTAINER","BUTTON","BUTTON_YELLOW","onClick","log","CONTAINER","Clues","clues","randomizeClues","getClues","renderClues","slice","CLUES","_arrayLikeToArray","arr","len","arr2","Array","_toConsumableArray","isArray","iter","Symbol","iterator","Object","from","o","minLen","n","prototype","toString","call","constructor","test","TypeError","QAns","qAnsVisible","qAns","freeAns","ansViewed","animationInProgress","loadQAStateFromLocalStorage","QANS","FREEANS","ANSVIEWED","randomizeQAns","getQAns","randIndices","randQAns","forEach","value","setAnsViewed","index","prevState","decrementScore","sleep","renderQAns","QA_INNER_CONTAINER","Q_ANS_ITEM","QUESTION","question","Q_ANS","BUTTON_SECONDARY","ANS_YES","ANS_NO","VIEW_ANSWER","ANSWER","QA_OUTER_CONTAINER","Q_A_CONTAINER","SLIDE_IN","SUBHEADING","CARD_SCORE_CONTAINER","CARD_SCORE_TEXT","score","CARD_SCORE_PENALTY","FLY_UP","LOADING_HINTS","ResultIcons","CORRECT_WRONG_ICON","CORRECT_ICON_CONTAINER","ansIsCorrect","SLIDE_IN_ICON","WRONG_ICON_CONTAINER","YesNoModal","handleYes","e","preventDefault","stopPropagation","handleNo","doNothing","MODAL","OUTER_CONTAINER","visible","VISIBLE","INVISIBLE","INNER_CONTAINER","CARD_CONTAINER","MODAL_HEADING","heading","MODAL_MESSAGE","message","BUTTON_CONTAINER","BUTTON_DANGER","BUTTON_YES","BUTTON_NO","Card","SCORE_PER_CARD","quitModalVisible","helpVisible","CLICKEDANS","SCORE","fetchCountrySetState","fetchCountry","COUNTRY","question_ans","setQAnsVisible","window","scroll","QANSVISIBLE","ANSCLICKED","clearLocalCardState","localStorage","removeItem","loadCardStateFromLocalStorage","localScore","parseInt","localQAnsVisible","localAnsClicked","localClickedAns","loadCard","increment","getCountryIDName","countryIDName","incrementCorrect","updateTotalScore","showExitConfirm","handleQuitYes","resetGame","handleQuitNo","goback","location","ROUTE_NEW_GAME","toggleViewHelp","handleUnhandledClick","CARD_CONTAINER_CONTAINER","BACK_BUTTON","BUTTON_BLUE","HELP_BUTTON","BUTTON_BLUE_PRESSED","HELP_SUBSECTION","SLIDE_DOWN","SLIDE_UP","BUTTON_NEXT","lastCard","QUIT_HEADING","QUIT_MESSAGE","CARD_HERO_IMAGE","SUBSECTION","CARD_TITLE","CARD_HEADING","HEADING","PROGRESS","PROGRESS_BAR_TEXT","gameLength","CARD_CLUES","VIEW_HINTS_OUTER_CONTAINER","VIEW_HINTS_CONTAINER","VIEW_HINTS","BUTTON_GREEN","CARD_CHOICES","QUIT_BUTTON_CONTAINER","BUTTON_QUIT","CARD","LOADING_SCREEN_CONTAINER","LOADING_TEXT","Loading","width","height","EndGame","startNewGame","goToNewGamePage","clearAllLocalStorage","ENDGAME","ENDGAME_TEXT","GREEN","totalCorrect","totalScore","ENDGAME_BUTTON_CONTAINER","PLAY_AGAIN","GO_HOME","Game","countriesList","networkError","inProgress","TOTALCORRECT","TOTALSCORE","INDEX","newGame","reload","postData","body","endpoint","MAIN_URL","fetch","method","POST","headers","JSON","stringify","fetchCardsList","listLength","exclude","EP_RAND_LIST","count","autoRefresh","fetchCountries","EP_COUNTRY","GET","refreshPage","getItem","parse","loadGameFromLocalStorage","COUNTRIESLIST","countriesLS","loadGameState","INPROGRESS","saveGameState","GAME_MAIN_CONTAINER","NETWORK_ERROR_CONTAINER","ERROR_MESSAGE","NETWORK_ERROR","SECTION"],"mappings":"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","file":"static/js/3.ef88b239.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default class ErrorBoundary extends React.Component {\n    state = {\n        hasError: false\n    }\n\n    static getDerivedStateFromError() {\n        return {hasError: true}\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.error(error, errorInfo)\n    }\n\n    render() {\n        if(this.state.hasError) {\n            return <div className={\"error_message\"}>Something went wrong. Please try refreshing the page.</div>\n        }\n        return this.props.children\n    }\n}\n","import React from \"react\"\nimport {\n    CHOICE_COUNT,\n    FREE_ANS,\n    HELP_HEADING,\n    HELP_PARA,\n    PENALTY_PER_ANS,\n} from \"../helper/common\"\n\n\nfunction HelpText() {\n    return (\n        <article>\n            <div className={HELP_PARA}><span className={HELP_HEADING}>Objective of the game </span> is\n                to score points by guessing the countries correctly in each card.\n            </div>\n            <div className={HELP_PARA}><span\n                className={HELP_HEADING}>Choose the correct option</span> from a total\n                of {CHOICE_COUNT} choices.\n            </div>\n            <div className={HELP_PARA}><span className={HELP_HEADING}>Three clues </span> are provided\n                for each country.\n            </div>\n            <div className={HELP_PARA}><span className={HELP_HEADING}>Additional hints </span> in the\n                form of questions and answers are provided. Click \"View More Hints\" to view them. You\n                can view upto {FREE_ANS} answers to these hints for free. Viewing additional answers\n                cost you {PENALTY_PER_ANS} points.\n            </div>\n        </article>\n    )\n}\n\nexport default HelpText\n","import React from \"react\"\nimport {\n    ANS_BELOW_IMAGE,\n    ANS_IMAGE_CONTAINER,\n    HERO_IMAGE_CONTAINER,\n    HERO_PERSON1,\n    HERO_PERSON2,\n    HERO_PERSON3,\n    HERO_WORLD_MAP, HIDE_ME, IMAGE_URL, IMAGES_PATH, PHOTO_CREDIT_CONTAINER, SHOW_ME, WORLD_MAP_CONTAINER\n} from \"../helper/common\"\nimport \"../css/Cardhero.css\"\n\nexport default class CardHero extends React.Component {\n\n    getCountryName = () => {\n        if(!this.props.country || !this.props.country.name) {\n            return \"\"\n        }\n        return this.props.country.name\n    }\n\n    getImageInfoURL = () => {\n        if(!this.props.country || !this.props.country.image_info || !this.props.country.image_info.url) {\n            return \"\"\n        }\n        return this.props.country.image_info.url\n    }\n\n    getImageURL = () => {\n        if(!this.props.country || !this.props.country.id) {\n            return \"\"\n        }\n        return IMAGE_URL + \"/\" + this.props.country.id + \".webp\"\n    }\n\n    getPhotographer = () => {\n        if(!this.props.country || !this.props.country.image_info || !this.props.country.image_info.photographer) {\n            return \"\"\n        }\n        return this.props.country.image_info.photographer\n    }\n\n    render() {\n        return (\n            <div className={HERO_IMAGE_CONTAINER}>\n                <div className={WORLD_MAP_CONTAINER + \" \" + (this.props.ansClicked ? HIDE_ME : SHOW_ME)}>\n                    <img className={HERO_WORLD_MAP} src={`${IMAGES_PATH}/hero-image-world.svg`} alt=\"world map\"/>\n                    <img className={HERO_PERSON1} src={`${IMAGES_PATH}/hero-image-person1.svg`} alt=\"person1\"/>\n                    <img className={HERO_PERSON2} src={`${IMAGES_PATH}/hero-image-person2.svg`} alt=\"person2\"/>\n                    <img className={HERO_PERSON3} src={`${IMAGES_PATH}/hero-image-person3.svg`} alt=\"person3\"/>\n                </div>\n                <div className={ANS_IMAGE_CONTAINER + \" \" + (this.props.ansClicked ? SHOW_ME : HIDE_ME)}>\n                    <img src={this.getImageURL()} alt=\"Answer\"/>\n                    <div className={PHOTO_CREDIT_CONTAINER}>\n                        <span>Photo by </span>\n                        <a href={this.getImageInfoURL()}\n                           rel={\"noreferrer\"}\n                           target={\"_blank\"}>\n                            {this.getPhotographer()}\n                        </a>\n                    </div>\n                    <div className={ANS_BELOW_IMAGE}>{this.getCountryName()}</div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {\n    BUTTON,\n    BUTTON_DISABLED, BUTTON_YELLOW,\n    CHOICE_BUTTONS_CONTAINER,\n    CHOICE_COUNT,\n    CHOICES,\n    CONTAINER,\n    CORRECT_ANS, WRONG_ANS\n} from \"../helper/common\"\nimport \"../css/Choices.css\"\n\nexport default class Choices extends React.Component {\n\n    state = {\n        randomized: false,\n        countries: [],\n    }\n\n    loadChoicesFromLocalStorage = async () => {\n        const countries = this.props.loadFromLocalStorage(CHOICES)\n        if(countries !== null) {\n            await this.setState({countries, randomized: true})\n            return true\n        }\n        return false\n    }\n\n    loadChoices = async () => {\n        const result = await this.loadChoicesFromLocalStorage()\n        if(!result) {\n            await this.fetchChoices()\n        }\n    }\n\n    fetchChoices = async() => {\n        const response = await this.props.fetchCountryList(CHOICE_COUNT - 1, this.props.countryID)\n        if(response && response.status === 200) {\n            const countryIDNames = response.json.result\n            let countries = countryIDNames.map(element => element.name)\n            countries.push(this.props.countryName)\n            for(let i = countries.length - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [countries[i], countries[j]] = [countries[j], countries[i]]\n            }\n            await this.setState({countries, randomized: true}, () => {\n                this.props.saveToLocalStorage(CHOICES, this.state.countries)\n            })\n        } else if(response && response.status === 500) {\n            this.props.setNetworkError()\n        }\n        else {\n            console.error(response)\n            return false\n        }\n    }\n\n    processAns = async (ans) => {\n        if(this.props.ansClicked) {\n            return\n        }\n        await this.props.setAnsClicked()\n        await this.props.setClickedAns(ans)\n        await this.props.updateScoreAndCount()\n    }\n\n    getClassNames = (element) => {\n        let classList = \"\"\n        if(!this.props.ansClicked) {\n            return classList\n        }\n        classList += \" \" + BUTTON_DISABLED\n        if(this.props.countryName === element) {\n            classList += \" \" + CORRECT_ANS\n            return classList\n        }\n        if(this.props.clickedAns !== element) {\n            return classList\n        }\n        classList += \" \" + WRONG_ANS\n        return classList\n    }\n\n    renderChoices = () => {\n        if(this.state.countries.length < CHOICE_COUNT) {\n            return <div>{\"Fewer than \" + CHOICE_COUNT + \" countries available. Please add more countries\"}</div>\n        }\n        return (\n            <div className={CHOICE_BUTTONS_CONTAINER}>{\n                this.state.countries.map(element => {\n                    return <button className={BUTTON + \" \" +  BUTTON_YELLOW + \" \" + CHOICES\n                                              + \" \" + this.getClassNames(element)}\n                                   key={element}\n                                   id={element}\n                                   onClick={() => {\n                                       this.processAns(element)\n                                   }}>\n                        {element}\n                    </button>\n                })\n            }</div>\n        )\n    }\n\n    componentDidMount() {\n        console.log(this.props.countryName)\n        this.loadChoices()\n    }\n\n    render() {\n        return (\n            <article className={CHOICES + \" \" + CONTAINER}>\n                {this.state.randomized ?\n                 <div>{this.renderChoices()}</div>\n                                       : <div>\n                     Initializing choices...\n                 </div>\n                }\n            </article>\n        )\n    }\n}\n","import React from \"react\"\nimport {CLUES} from \"../helper/common\"\nimport \"../css/Clues.css\"\n\nexport default class Clues extends React.Component {\n\n    state = {\n        randomized: false,\n        clues: []\n    }\n\n    randomizeClues = () => {\n        let clues = this.props.getClues()\n        if(!clues) {\n            console.error(\"Clues are empty or null\")\n            return\n        }\n        for(let i = clues.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [clues[i], clues[j]] = [clues[j], clues[i]]\n        }\n        this.setState({randomized: true, clues})\n    }\n\n    renderClues = () => {\n        if(this.state.clues.length < 3) {\n            return <div/>\n        }\n        return (\n            <ul>{\n                this.state.clues.slice(0, 3).map(element => <li key={element}>{element}</li>)\n            }</ul>\n        )\n    }\n\n    componentDidMount() {\n        this.randomizeClues()\n    }\n\n    render() {\n        return (\n            <article className={CLUES}>\n                {this.state.randomized ?\n                 <div>{this.renderClues()}</div>\n                                       : <div>\n                     Initializing clues...\n                 </div>\n                }\n            </article>\n        )\n    }\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from \"react\"\nimport {\n    ANS_NO, ANS_YES, ANSVIEWED,\n    ANSWER, BUTTON, BUTTON_DISABLED,\n    BUTTON_SECONDARY, CARD_SCORE_CONTAINER,\n    CARD_SCORE_PENALTY, CARD_SCORE_TEXT,\n    FLY_UP, FREE_ANS, FREEANS,\n    HIDE_ME, LOADING_HINTS,\n    PENALTY_PER_ANS, Q_A_CONTAINER,\n    Q_ANS, Q_ANS_ITEM,\n    QA_INNER_CONTAINER,\n    QA_OUTER_CONTAINER, QANS,\n    QUESTION, SHOW_ME, sleep,\n    SLIDE_IN, SUBHEADING, VIEW_ANSWER\n} from \"../helper/common\"\nimport \"../css/QAns.css\"\n\nexport default class QAns extends React.Component {\n\n    state = {\n        qAnsVisible: false,\n        randomized: false,\n        qAns: [],\n        freeAns: FREE_ANS,\n        ansViewed: [],\n        animationInProgress: false\n    }\n\n    loadQAStateFromLocalStorage = async () => {\n        const qAns = this.props.loadFromLocalStorage(QANS)\n        const freeAns = this.props.loadFromLocalStorage(FREEANS)\n        const ansViewed = this.props.loadFromLocalStorage(ANSVIEWED)\n        if(freeAns !== null && qAns !== null && ansViewed !== null) {\n            await this.setState(\n                {\n                    randomized: true,\n                    qAns,\n                    freeAns,\n                    ansViewed\n                })\n            return true\n        }\n        return false\n    }\n\n    randomizeQAns = async() => {\n        const result = await this.loadQAStateFromLocalStorage()\n        if(result) {\n            return\n        }\n        let qAns = this.props.getQAns()\n        if(!qAns) {\n            console.error(\"Question answers are empty or null\")\n            return\n        }\n        let randIndices = []\n        for(let i = 0; i < qAns.length; i++) {\n            randIndices.push(i)\n            this.state.ansViewed.push(false)\n        }\n        for(let i = randIndices.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [randIndices[i], randIndices[j]] = [randIndices[j], randIndices[i]]\n        }\n        let randQAns = []\n        randIndices.forEach((value) => {\n            randQAns.push(qAns[value])\n        })\n        await this.setState(\n            {\n                randomized: true,\n                qAns: randQAns\n            }, () => {\n            this.props.saveToLocalStorage(QANS, this.state.qAns)\n        })\n    }\n\n    setAnsViewed = async(index) => {\n        if(this.state.ansViewed[index] || this.props.ansClicked) {\n            return\n        }\n        await this.setState((prevState) => {\n            let ansViewed = [...prevState.ansViewed]\n            ansViewed[index] = true\n            return {\n                ansViewed,\n                freeAns: prevState.freeAns - 1,\n                animationInProgress: false\n            }\n        }, async() => {\n            this.props.saveToLocalStorage(FREEANS, this.state.freeAns)\n            this.props.saveToLocalStorage(ANSVIEWED, this.state.ansViewed)\n            if(this.state.freeAns < 0) {\n                await this.props.decrementScore()\n                await this.setState({animationInProgress: true})\n                await sleep(0.4)\n                this.setState({animationInProgress: false})\n            }\n        })\n    }\n\n    renderQAns = () => {\n        if(this.state.qAns.length < 1) {\n            return <div/>\n        }\n        return (\n            <ul className={QA_INNER_CONTAINER}>{\n                this.state.qAns.map((element, index) => {\n                    return (<li className={Q_ANS_ITEM} key={element.question}>\n                        <span className={QUESTION}>{element.question}</span>\n                        <button className={Q_ANS + \" \" + BUTTON\n                                           + \" \" + BUTTON_SECONDARY + \" \"\n                                           + (this.state.ansViewed[index]\n                                              ? (element.ans\n                                                 ? ANS_YES\n                                                 : ANS_NO)\n                                              : \" \")\n                                           + (this.props.ansClicked ? \" \" + BUTTON_DISABLED : \"\")}\n                                onClick={() => this.setAnsViewed(index)}>\n                            <span className={VIEW_ANSWER + \" \" +\n                                             (this.state.ansViewed[index] ? HIDE_ME : SHOW_ME)}>\n                                View answer</span>\n                            <span className={ANSWER + \" \" +\n                                             (this.state.ansViewed[index] ? SHOW_ME : HIDE_ME)}>\n                                {element.ans ? \"Yes\" : \"No\"}</span>\n                        </button>\n                    </li>)\n                })\n            }</ul>\n        )\n    }\n\n    componentDidMount() {\n        this.randomizeQAns()\n    }\n\n    render() {\n        return (\n            <article id={\"QuestionAns\"} className={QA_OUTER_CONTAINER}>\n                {(this.state.randomized\n                  ? <div className={Q_A_CONTAINER + \" \" + (this.props.qAnsVisible ? SLIDE_IN : HIDE_ME)}>\n                      {(this.props.ansClicked\n                        ? <div>\n                            <h3 className={Q_ANS + \" \" + SUBHEADING}>Hints you viewed</h3>\n                            <div className={CARD_SCORE_CONTAINER}>\n                                <div className={CARD_SCORE_TEXT}>Scored: {this.props.score} points</div>\n                            </div>\n                        </div>\n                        : <div className={CARD_SCORE_CONTAINER}>\n                            <div className={CARD_SCORE_TEXT}>Scorable points: {this.props.score}</div>\n                            <div className={CARD_SCORE_TEXT + \" \"\n                                            + CARD_SCORE_PENALTY + \" \" +\n                                            (this.state.animationInProgress ? FLY_UP : \"\")}>-{PENALTY_PER_ANS}</div>\n                            {(this.state.freeAns > 0\n                              ? <h3 className={Q_ANS + \" \" + SUBHEADING}>View {this.state.freeAns} hints for free</h3>\n                              : <h3 className={Q_ANS + \" \" + SUBHEADING}>Hints costs {PENALTY_PER_ANS} points</h3>)}\n                        </div>\n                      )}\n                      {this.renderQAns()}\n                  </div>\n                  : <div className={LOADING_HINTS}>Loading Hints...</div>)}\n            </article>\n        )\n    }\n}\n","import React from \"react\"\nimport {\n    CORRECT_ICON_CONTAINER,\n    CORRECT_WRONG_ICON, HIDE_ME, IMAGES_PATH, SLIDE_IN_ICON, WRONG_ICON_CONTAINER\n} from \"../helper/common\"\nimport \"../css/ResultIcon.css\"\n\nexport default class ResultIcons extends React.Component {\n    render() {\n        return (\n            <div className={CORRECT_WRONG_ICON }>\n                <div className={CORRECT_ICON_CONTAINER + \" \" + (this.props.ansIsCorrect() ? SLIDE_IN_ICON : HIDE_ME)}>\n                    <img src={`${IMAGES_PATH}/tick_mark.svg`} alt=\"tick mark\"/> <span>Correct</span>\n                </div>\n                <div className={WRONG_ICON_CONTAINER + \" \" + (this.props.ansIsCorrect() ? HIDE_ME : SLIDE_IN_ICON)}>\n                    <img src={`${IMAGES_PATH}/cross_mark.svg`} alt=\"cross mark\"/> <span>Wrong</span>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {\n    BUTTON, BUTTON_CONTAINER,\n    CARD_CONTAINER,\n    BUTTON_DANGER,\n    INNER_CONTAINER, INVISIBLE,\n    MODAL,\n    MODAL_HEADING,\n    MODAL_MESSAGE,\n    OUTER_CONTAINER, VISIBLE, BUTTON_YES, BUTTON_NO\n} from \"../helper/common\"\nimport \"../css/Modal.css\"\n\nexport default class YesNoModal extends React.Component {\n\n    handleYes = (e) => {\n        e.preventDefault()\n        e.stopPropagation()\n        this.props.handleYes(e)\n    }\n\n    handleNo = (e) => {\n        this.props.handleNo(e)\n    }\n\n    doNothing = (e) => {\n        e.preventDefault()\n        e.stopPropagation()\n    }\n\n    render() {\n        return (\n            <div onClick={this.handleNo}\n                 className={`${MODAL} ${OUTER_CONTAINER} ${(this.props.visible ? VISIBLE : INVISIBLE)}`}>\n                <div className={`${MODAL} ${INNER_CONTAINER}`}>\n                    <article onClick={this.doNothing} className={`${CARD_CONTAINER} ${MODAL}`}>\n                        <h3 className={MODAL_HEADING}>{this.props.heading}</h3>\n                        <div className={MODAL_MESSAGE}>{this.props.message}</div>\n                        <div className={BUTTON_CONTAINER}>\n                            <button className={`${BUTTON} ${BUTTON_DANGER} ${BUTTON_YES}`}\n                                    onClick={this.handleYes}>Yes\n                            </button>\n                            <button className={BUTTON + \" \" + BUTTON_NO}\n                                    onClick={this.handleNo}>No\n                            </button>\n                        </div>\n                    </article>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {\n    CARD_CONTAINER,\n    CARD_CHOICES,\n    CARD_CLUES,\n    CARD_HERO_IMAGE,\n    Q_ANS,\n    CARD_TITLE,\n    SUBSECTION,\n    CARD_HEADING,\n    HEADING,\n    LOADING_SCREEN_CONTAINER,\n    CARD,\n    VIEW_HINTS_CONTAINER,\n    HIDE_ME,\n    SHOW_ME,\n    BUTTON,\n    VIEW_HINTS,\n    VIEW_HINTS_OUTER_CONTAINER,\n    CORRECT_WRONG_ICON,\n    BUTTON_NEXT,\n    SCORE_PER_CARD,\n    PENALTY_PER_ANS,\n    SCORE,\n    COUNTRY,\n    QANS,\n    FREEANS,\n    QANSVISIBLE,\n    ANSCLICKED,\n    CLICKEDANS,\n    CHOICES,\n    BUTTON_QUIT,\n    BUTTON_DANGER,\n    QUIT_BUTTON_CONTAINER,\n    QUIT_MESSAGE,\n    QUIT_HEADING,\n    ANSVIEWED,\n    BUTTON_GREEN,\n    PROGRESS,\n    PROGRESS_BAR_TEXT,\n    OUTER_CONTAINER,\n    CARD_CONTAINER_CONTAINER,\n    BACK_BUTTON,\n    BUTTON_BLUE,\n    HELP_BUTTON,\n    HELP_SUBSECTION,\n    SLIDE_DOWN, SLIDE_UP, BUTTON_BLUE_PRESSED, ROUTE_NEW_GAME, LOADING_TEXT\n} from \"../helper/common\"\nimport CardHero from \"./CardHero\"\nimport Choices from \"./Choices\"\nimport Clues from \"./Clues\"\nimport HelpText from \"./HelpText\"\nimport Loading from \"./Loading\"\nimport \"../css/Card.css\"\nimport QAns from \"./QAns\"\nimport ResultIcons from \"./ResultIcons\"\nimport YesNoModal from \"./YesNoModal\"\n\nexport default class Card extends React.Component {\n\n    state = {\n        country: null,\n        qAnsVisible: false,\n        ansClicked: false,\n        clickedAns: \"\",\n        score: SCORE_PER_CARD,\n        quitModalVisible: false,\n        helpVisible: false\n    }\n\n    setClickedAns = async(clickedAns) => {\n        await this.setState({clickedAns}, () => {\n            this.props.saveToLocalStorage(CLICKEDANS, this.state.clickedAns)\n        })\n    }\n\n    decrementScore = async() => {\n        await this.setState((prevState) => {\n            return {score: prevState.score - PENALTY_PER_ANS}\n        }, () => {\n            this.props.saveToLocalStorage(SCORE, this.state.score)\n        })\n    }\n\n    fetchCountrySetState = async(countryID) => {\n        const result = await this.props.fetchCountry(countryID)\n        if(!result) {\n            return\n        }\n        if(result.status !== 200) {\n            console.error(\"Error fetching country\")\n            console.error(result)\n            return\n        }\n        await this.setState({country: result.json.result}, () => {\n            this.props.saveToLocalStorage(COUNTRY, this.state.country)\n        })\n    }\n\n    getClues = () => {\n        if(!this.state.country || !this.state.country.clues) {\n            return false\n        }\n        return this.state.country.clues\n    }\n\n    getQAns = () => {\n        if(!this.state.country || !this.state.country.question_ans) {\n            return false\n        }\n        return this.state.country.question_ans\n    }\n\n    setQAnsVisible = async() => {\n        await this.setState({qAnsVisible: true}, async() => {\n            window.scroll(0, 1200)\n            this.props.saveToLocalStorage(QANSVISIBLE, this.state.qAnsVisible)\n        })\n    }\n\n    setAnsClicked = async() => {\n        await this.setState({ansClicked: true}, () => {\n            window.scroll(0, 100)\n            this.props.saveToLocalStorage(ANSCLICKED, this.state.ansClicked)\n        })\n    }\n\n    ansIsCorrect = () => {\n        if(!this.state.country) {\n            return false\n        }\n        return this.state.country.name === this.state.clickedAns\n    }\n\n    clearLocalCardState = () => {\n        localStorage.removeItem(COUNTRY)\n        localStorage.removeItem(QANS)\n        localStorage.removeItem(SCORE)\n        localStorage.removeItem(FREEANS)\n        localStorage.removeItem(QANSVISIBLE)\n        localStorage.removeItem(ANSCLICKED)\n        localStorage.removeItem(ANSVIEWED)\n        localStorage.removeItem(CLICKEDANS)\n        localStorage.removeItem(CHOICES)\n    }\n\n    loadCardStateFromLocalStorage = async() => {\n        let country = await this.props.loadFromLocalStorage(COUNTRY)\n        if(country === null) {\n            return false\n        }\n        let score = SCORE_PER_CARD\n        let qAnsVisible = false\n        let ansClicked = false\n        let clickedAns = \"\"\n        try {\n            const localScore = await this.props.loadFromLocalStorage(SCORE)\n            if(localScore !== null) {\n                score = parseInt(localScore)\n            }\n            country = await this.props.loadFromLocalStorage(COUNTRY)\n            let localQAnsVisible = await this.props.loadFromLocalStorage(QANSVISIBLE)\n            if(typeof localQAnsVisible === \"boolean\") {\n                qAnsVisible = localQAnsVisible\n            }\n            const localAnsClicked = await this.props.loadFromLocalStorage(ANSCLICKED)\n            if(localAnsClicked !== null) {\n                ansClicked = localAnsClicked\n            }\n            const localClickedAns = await this.props.loadFromLocalStorage(CLICKEDANS)\n            if(localClickedAns !== null) {\n                clickedAns = localClickedAns\n            }\n        }\n        catch(e) {\n            console.error(\"Error loading item for current card from local storage\")\n            console.error(e)\n            return false\n        }\n        await this.setState({\n                                country,\n                                qAnsVisible,\n                                ansClicked,\n                                clickedAns,\n                                score\n                            })\n        return true\n    }\n\n    loadCard = async(increment = true, e) => {\n        if(e) {\n            console.log(\"loadcard even handler \")\n            console.log(e.target)\n        }\n        if(!increment) {\n            console.log(\"Attempting to load card state from local storage\")\n            if(await this.loadCardStateFromLocalStorage()) {\n                console.log(\"Successfully loaded card state from local storage\")\n                return\n            }\n            console.log(\"Failed to load card state from local storage\")\n        }\n        this.clearLocalCardState()\n        await this.props.loadCard(increment)\n        const countryIDName = await this.props.getCountryIDName()\n        if(!countryIDName.id) { // game end\n            return\n        }\n        console.log(countryIDName)\n        await this.setState(\n            {\n                country: null,\n                qAnsVisible: false,\n                ansClicked: false,\n                clickedAns: \"\",\n                score: SCORE_PER_CARD\n            }, () => {\n                this.props.saveToLocalStorage(QANSVISIBLE, this.state.qAnsVisible)\n                this.props.saveToLocalStorage(SCORE, this.state.score)\n            })\n        const countryID = countryIDName.id\n        await this.fetchCountrySetState(countryID)\n    }\n\n    updateScoreAndCount = async() => {\n        if(this.ansIsCorrect()) {\n            await this.props.incrementCorrect()\n            await this.props.updateTotalScore(this.state.score)\n            return\n        }\n        await this.setState({score: 0}, () => {\n            this.props.saveToLocalStorage(SCORE, this.state.score)\n        })\n    }\n\n    showExitConfirm = (e) => {\n        e.preventDefault()\n        this.setState({quitModalVisible: true})\n    }\n\n    handleQuitYes = () => {\n        this.props.resetGame()\n    }\n\n    handleQuitNo = () => {\n        this.setState({quitModalVisible: false})\n    }\n\n    goback = (e) => {\n        e && e.preventDefault()\n        window.location.href = ROUTE_NEW_GAME\n    }\n\n    toggleViewHelp = async(e) => {\n        if(e) {\n            e.preventDefault()\n        }\n        await this.setState((prevState) => {\n            return {helpVisible: !prevState.helpVisible}\n        })\n    }\n\n    handleUnhandledClick = async(e) => {\n        if(e) {\n            e.preventDefault()\n            e.stopPropagation()\n        }\n        console.log(e.target)\n        if(this.state.helpVisible) {\n            await this.setState({helpVisible: false})\n        }\n    }\n\n    componentDidMount() {\n        this.loadCard(false)\n    }\n\n    render() {\n        return (\n            <div className={OUTER_CONTAINER\n                            + \" \" + CARD_CONTAINER_CONTAINER}\n                 onClick={this.handleUnhandledClick}>\n                <button className={BUTTON\n                                   + \" \" + BACK_BUTTON\n                                   + \" \" + BUTTON_BLUE}\n                        onClick={this.goback}>&#8810; Back\n                </button>\n                <button className={BUTTON\n                                   + \" \" + HELP_BUTTON\n                                   + \" \" + BUTTON_BLUE\n                                   + \" \" + (this.state.helpVisible && BUTTON_BLUE_PRESSED)}\n                        onClick={this.toggleViewHelp}>?\n                </button>\n                <section className={HELP_SUBSECTION\n                                    + \" \"\n                                    + (this.state.helpVisible ? SLIDE_DOWN : SLIDE_UP)}>\n                    <HelpText/>\n                </section>\n                <article className={CARD_CONTAINER}>\n                    <button className={BUTTON\n                                       + \" \" + BUTTON_NEXT\n                                       + \" \" + BUTTON_BLUE\n                                       + \" \" + (this.state.ansClicked ? SHOW_ME : HIDE_ME)}\n                            onClick={this.loadCard}>{this.props.lastCard()\n                                                     ? <span>View End Game Score &#8811;</span>\n                                                     : <span>Next &#8811;</span>}</button>\n                    <YesNoModal handleYes={this.handleQuitYes}\n                                handleNo={this.handleQuitNo}\n                                visible={this.state.quitModalVisible}\n                                heading={QUIT_HEADING}\n                                message={QUIT_MESSAGE}/>\n                    <section className={CARD_HERO_IMAGE + \" \" + SUBSECTION}>\n                        <CardHero ansClicked={this.state.ansClicked}\n                                  country={this.state.country}/>\n                    </section>\n                    <section className={CARD_TITLE + \" \" + SUBSECTION}>\n                        <div className={CARD_HEADING + \" \" + HEADING}>Guess The Country</div>\n                    </section>\n                    <section className={SUBSECTION + \" \" + PROGRESS}>\n                        <div className={PROGRESS_BAR_TEXT}>Question: {this.props.index +\n                                                                      1}/{this.props.gameLength}</div>\n                    </section>\n                    {\n                        this.state.country\n                        ? <div>\n                            <section className={CARD_CLUES + \" \" + SUBSECTION}>\n                                <Clues getClues={this.getClues}/>\n                            </section>\n                            <section className={VIEW_HINTS_OUTER_CONTAINER + \" \" + SUBSECTION}>\n                                <div className={VIEW_HINTS_CONTAINER + \" \" +\n                                                ((this.state.qAnsVisible || this.state.ansClicked) ? HIDE_ME :\n                                                 SHOW_ME)}>\n                                    <button className={BUTTON + \" \" + VIEW_HINTS + \" \" + BUTTON_GREEN}\n                                            onClick={this.setQAnsVisible}>View more hints\n                                    </button>\n                                </div>\n                            </section>\n                            <section className={CORRECT_WRONG_ICON + \" \" + SUBSECTION + \" \" +\n                                                ((this.state.ansClicked) ? SHOW_ME : HIDE_ME)}>\n                                <ResultIcons ansIsCorrect={this.ansIsCorrect}\n                                             ansClicked={this.state.ansClicked}/>\n                            </section>\n                            <section className={CARD_CHOICES + \" \" + SUBSECTION}>\n                                <Choices countryID={this.state.country.id}\n                                         countryName={this.state.country.name}\n                                         updateScoreAndCount={this.updateScoreAndCount}\n                                         setAnsClicked={this.setAnsClicked}\n                                         ansClicked={this.state.ansClicked}\n                                         clickedAns={this.state.clickedAns}\n                                         setNetworkError={this.props.setNetworkError}\n                                         loadFromLocalStorage={this.props.loadFromLocalStorage}\n                                         saveToLocalStorage={this.props.saveToLocalStorage}\n                                         setClickedAns={this.setClickedAns}\n                                         fetchCountryList={this.props.fetchCountryList}/>\n                            </section>\n                            <section className={Q_ANS + \" \" + SUBSECTION}>\n                                <QAns getQAns={this.getQAns}\n                                      ansClicked={this.state.ansClicked}\n                                      score={this.state.score}\n                                      decrementScore={this.decrementScore}\n                                      loadFromLocalStorage={this.props.loadFromLocalStorage}\n                                      saveToLocalStorage={this.props.saveToLocalStorage}\n                                      qAnsVisible={this.state.qAnsVisible}/>\n                            </section>\n                            <section className={QUIT_BUTTON_CONTAINER}>\n                                <button className={BUTTON + \" \" + BUTTON_QUIT + \" \" + BUTTON_DANGER}\n                                        onClick={this.showExitConfirm}>Quit Game\n                                </button>\n                            </section>\n                        </div>\n                        : <div className={CARD + \" \" + LOADING_SCREEN_CONTAINER}>\n                            <span className={LOADING_TEXT}>Loading data...</span>\n                            <Loading width={9} height={2}/>\n                        </div>\n                    }\n                </article>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {\n    BUTTON, CARD_CONTAINER, ENDGAME_TEXT, ENDGAME,\n    HEADING, GREEN, PLAY_AGAIN, GO_HOME, ENDGAME_BUTTON_CONTAINER\n} from \"../helper/common\"\nimport \"../css/EndGame.css\"\n\n\nexport default class EndGame extends React.Component {\n\n    startNewGame = () => {\n        this.props.resetGame(true)\n    }\n\n    goToNewGamePage = () => {\n        this.props.resetGame(false)\n    }\n\n    componentDidMount() {\n        this.props.clearAllLocalStorage()\n    }\n\n    render() {\n        return (\n            <section className={CARD_CONTAINER + \" \" + ENDGAME}>\n                <h1 className={ENDGAME + \" \" + HEADING}>End Game Score</h1>\n                <section className={ENDGAME_TEXT}>\n                    <div>Thank you for playing!</div>\n                    <div>Out of <span className={GREEN}>{this.props.gameLength} </span>\n                        questions, you answered\n                        <span className={GREEN}> {this.props.totalCorrect} </span> correctly.\n                    </div>\n                    <div>You scored a total of <span className={GREEN}>{this.props.totalScore}</span> points.</div>\n                </section>\n                <div className={ENDGAME + \" \" + ENDGAME_BUTTON_CONTAINER}>\n                    <button className={PLAY_AGAIN + \" \" + ENDGAME + \" \" + BUTTON}\n                            onClick={this.startNewGame}>Play again\n                    </button>\n                    <button className={GO_HOME + \" \" + ENDGAME + \" \" + BUTTON}\n                            onClick={this.goToNewGamePage}>Go Home\n                    </button>\n                </div>\n            </section>\n        )\n    }\n}\n","import React from \"react\"\nimport {\n    CARD, COUNTRIESLIST, EP_COUNTRY,\n    EP_RAND_LIST, GET,\n    INPROGRESS, INDEX, LOADING_SCREEN_CONTAINER,\n    GAME_MAIN_CONTAINER, MAIN_URL, POST, SECTION,\n    TOTALCORRECT, TOTALSCORE,\n    sleep, ROUTE_NEW_GAME, NETWORK_ERROR_CONTAINER, NETWORK_ERROR, ERROR_MESSAGE, BUTTON\n} from \"../helper/common\"\nimport Card from \"./Card\"\nimport EndGame from \"./EndGame\"\nimport ErrorBoundary from \"./ErrorBoundary\"\nimport Loading from \"./Loading\"\n\n\nexport default class Game extends React.Component {\n\n    state = {\n        countriesList: [],\n        index: 0,\n        networkError: false,\n        totalCorrect: 0,\n        totalScore: 0,\n        inProgress: false\n    }\n\n    incrementCorrect = async() => {\n        await this.setState((prevState) => {\n            return {totalCorrect: prevState.totalCorrect + 1}\n        }, () => {\n            this.props.saveToLocalStorage(TOTALCORRECT, this.state.totalCorrect)\n        })\n    }\n\n    lastCard = () => {\n        return (this.state.index + 1) === this.state.countriesList.length\n    }\n\n    updateTotalScore = async(score) => {\n        await this.setState((prevState) => {\n            return {totalScore: prevState.totalScore + score}\n        }, () => {\n            this.props.saveToLocalStorage(TOTALSCORE, this.state.totalScore)\n        })\n    }\n\n    loadCard = async(increment) => {\n        if(increment) {\n            await this.setState((prevState) => {\n                return {index: prevState.index + 1}\n            }, () => {\n                this.props.saveToLocalStorage(INDEX, this.state.index)\n            })\n        }\n    }\n\n    resetGame = async(newGame = false) => {\n        await this.setState(\n            {\n                countriesList: [],\n                index: 0,\n                networkError: false,\n                totalCorrect: 0,\n                totalScore: 0\n            })\n        this.props.clearAllLocalStorage()\n        if(newGame) {\n            window.location.reload()\n            return\n        }\n        window.location.href = ROUTE_NEW_GAME\n    }\n\n    getCountryIDName = async() => {\n        if(this.state.index >= this.state.countriesList.length) {\n            return false\n        }\n        return (this.state.countriesList[this.state.index])\n    }\n\n    postData = async(body = {}, endpoint = \"\") => {\n        const url = MAIN_URL + endpoint\n        const response = await fetch(url, {\n            method: POST,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n        })\n        const json = await response.json()\n        const status = await response.status\n        return {\n            json,\n            status\n        }\n    }\n\n    fetchCardsList = async(listLength, exclude = null) => {\n        let body = {\n            \"count\": listLength\n        }\n        if(exclude) {\n            body.exclude = exclude\n        }\n        try {\n            const response = await this.postData(body, EP_RAND_LIST)\n            if(response.status === 500) {\n                this.setNetworkError()\n                return\n            }\n            if(response.status !== 200) {\n                console.error(\"Couldn't fetch cards list\")\n                console.error(response)\n            }\n            else if(response.json.count !== listLength) {\n                console.error(`Requested ${listLength} cards, server sent ${response.json.count}`)\n            }\n            // console.log(response.json.result.map(element => element.name))\n            const status = response.status\n            const json = response.json\n            return {\n                \"status\": status,\n                \"json\": json\n            }\n        }\n        catch(e) {\n            console.error(\"The following error occurred:\")\n            console.error(e)\n            await this.setState({networkError: true}, this.autoRefresh)\n            return false\n        }\n    }\n\n    fetchCountries = async() => {\n        const response = await this.fetchCardsList(this.props.gameLength)\n        if(response && response.status === 200) {\n            const countriesList = response.json.result\n            console.log(countriesList)\n            await this.setState({countriesList})\n        }\n    }\n\n    fetchCountry = async(countryID) => {\n        const url = MAIN_URL + EP_COUNTRY + `/${countryID}`\n\n        try {\n            const response = await fetch(url, {\n                method: GET,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            })\n            const json = await response.json()\n            console.log(json)\n            const status = await response.status\n            return {\n                json,\n                status\n            }\n        }\n        catch(e) {\n            console.error(\"The following error happened fetching country \" + countryID)\n            console.error(e)\n            return false\n        }\n    }\n\n    refreshPage = () => {\n        window.location.reload(true)\n    }\n\n    autoRefresh = async() => {\n        if(this.state.networkError) {\n            await sleep(20)\n            this.refreshPage()\n        }\n    }\n\n    loadFromLocalStorage = (name) => {\n        const value = localStorage.getItem(name)\n        if(value === null || value === \"\") {\n            return value\n        }\n        return JSON.parse(value)\n    }\n\n    loadGameFromLocalStorage = async() => {\n        try {\n            const countriesLS = await this.loadFromLocalStorage(COUNTRIESLIST)\n            console.log(countriesLS)\n            if(!countriesLS || !Array.isArray(countriesLS) || countriesLS.length === 0) {\n                return false\n            }\n            let countriesList = countriesLS.map((element) => {\n                return {\"id\": element.id, \"name\": element.name}\n            })\n            const index = await parseInt(this.loadFromLocalStorage(INDEX))\n            const totalCorrect = await parseInt(this.loadFromLocalStorage(TOTALCORRECT))\n            const totalScore = await parseInt(this.loadFromLocalStorage(TOTALSCORE))\n            await this.setState(\n                {\n                    countriesList,\n                    index,\n                    totalCorrect,\n                    totalScore\n                })\n            return true\n        }\n        catch(e) {\n            console.error(\"Could not load game from local storage\")\n            console.error(e)\n            return false\n        }\n    }\n\n    loadGameState = async() => {\n        const inProgress = this.loadFromLocalStorage(INPROGRESS)\n        if(inProgress !== null && inProgress === true) {\n            console.log(\"loading from local storage\")\n            await this.setState({inProgress: true})\n            const status = await this.loadGameFromLocalStorage()\n            if(status) {\n                return\n            }\n        }\n        await this.setState({inProgress: false})\n        await this.fetchCountries()\n        await this.saveGameState()\n    }\n\n    saveGameState = async() => {\n        this.props.saveToLocalStorage(COUNTRIESLIST, this.state.countriesList)\n        this.props.saveToLocalStorage(INDEX, this.state.index)\n        this.props.saveToLocalStorage(TOTALCORRECT, this.state.totalCorrect)\n        this.props.saveToLocalStorage(TOTALSCORE, this.state.totalScore)\n        this.props.saveToLocalStorage(INPROGRESS, true)\n    }\n\n    setNetworkError = async() => {\n        await this.setState({networkError: true})\n    }\n\n    componentDidMount() {\n        this.loadGameState()\n    }\n\n    render() {\n        return (\n            <article className={GAME_MAIN_CONTAINER}>\n                <ErrorBoundary>\n                    {this.state.networkError\n                     ? (<article className={NETWORK_ERROR_CONTAINER}>\n                            <div className={ERROR_MESSAGE}>{NETWORK_ERROR}</div>\n                            <button className={BUTTON}\n                                    onClick={this.refreshPage}>Refresh Page\n                            </button>\n                        </article>)\n                     : (this.state.countriesList.length > 0\n                        ? <section className={SECTION + \" \" + CARD}>\n                            {(this.state.index < this.state.countriesList.length\n                              ? <Card getCountryIDName={this.getCountryIDName}\n                                      fetchCountry={this.fetchCountry}\n                                      incrementCorrect={this.incrementCorrect}\n                                      totalScore={this.state.totalScore}\n                                      updateTotalScore={this.updateTotalScore}\n                                      fetchCountryList={this.fetchCardsList}\n                                      loadFromLocalStorage={this.loadFromLocalStorage}\n                                      saveToLocalStorage={this.props.saveToLocalStorage}\n                                      resetGame={this.resetGame}\n                                      gameLength={this.state.countriesList.length}\n                                      lastCard={this.lastCard}\n                                      index={this.state.index}\n                                      setNetworkError={this.setNetworkError}\n                                      loadCard={this.loadCard}/>\n                              : <EndGame resetGame={this.resetGame}\n                                         gameLength={this.props.gameLength}\n                                         totalScore={this.state.totalScore}\n                                         clearAllLocalStorage={this.props.clearAllLocalStorage}\n                                         totalCorrect={this.state.totalCorrect}/>\n                            )}\n                        </section>\n                        : <div className={LOADING_SCREEN_CONTAINER}>\n                            <span>Loading</span>\n                            <Loading width={9} height={2}/>\n                        </div>)\n                    }\n                </ErrorBoundary>\n            </article>\n        )\n    }\n}\n"],"sourceRoot":""}